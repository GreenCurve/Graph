import matplotlib.pyplot as mp
import statistics as st
import numpy as np
import scipy.integrate as integrate
from scipy.integrate import quad
import sys

#Программа может воспроизводить любое дз - нужно просто убрать комментарии с нужных команд
#Функции разделены на блоки комментариями (идут в хронологическом порядке)
#Задания 5 (форматирование текста) и 6 (чтение из файла) работают всегда - они просто удобны

#Вот это можно считать заданием 6
with open('br.txt') as f:
    FILE = []
    for x in f: FILE.append([int(y) for y in x.split(',')])
days = FILE[0]
TempDay = FILE[1]
TempNight = FILE[2]
PressDay = FILE[3]
PressNight = FILE[4]

global Legacy_Legend
Legacy_Legend = {}

global Counter
Counter = 0


fig,(ax1, ax2) = mp.subplots(2)

with open('readme.txt', 'w') as f:
    pass


class Figure:
    # Основные актеры

    def __init__(self,ax,x,title = 'title',ylabel = 'y',xlabel = 'x'):
        self.ax = ax
        self.x = x
        self.ax.grid(True)
        self.title = title
        self.ylabel = ylabel
        self.xlabel = xlabel
        self.Table = []


    def plot(self,y,c = '',legend = 'empty'):
        actor = self.ax.plot(self.x,y,c,label = legend)
        self.LegendTeller(actor)
        self.ax.set_title(self.title)
        self.ax.set_ylabel(self.ylabel)
        self.ax.set_xlabel(self.xlabel)


    def LegendTeller(self, data):
        global Legacy_Legend
        actor = []
        try :actor = Legacy_Legend[self.ax]
        except Exception: Legacy_Legend[self.ax] = []
        actor += data
        Legacy_Legend[self.ax] = actor
        self.ax.legend(handles=Legacy_Legend[self.ax], loc='center right', bbox_to_anchor=(0.63, 0.6, 0.5, 0.5))



    #Второе задание

    def MedianTheBuilder(self, DataArray, legend = 'empty'):
        DataArray1,DataArray2 = DataArray.copy(),DataArray.copy()
        for i in range(len(DataArray1) - 2):
            avg = [DataArray1[i], DataArray1[i + 1], DataArray1[i + 2]]
            DataArray2[i + 1] = st.mean(avg)
        Mean = self.ax.plot(DataArray2, label = legend)
        self.LegendTeller(Mean)

    #Третье задание

    def DoubleSorter(self,Array):
        Array1 = Array.copy()
        while True:
            temp = 0
            for i in range(len(Array1) - 2):
                ps, pr, fu = Array1[i], Array1[i + 1], Array1[i + 2]
                if pr > fu: pr, fu = fu, pr; temp += 1
                if ps > pr: ps, pr = pr, ps; temp += 1
                Array1[i],Array1[i + 1],Array1[i + 2] = ps,pr,fu
            if temp == 0: break
        self.tabletka('Sorted Array!',', '.join(str(x) for x in Array1))




    def Fitter(self, ydata, deg,leg = 'approximation',r = 0,xdata = None):
        if xdata == None:xdata = self.x
        #falseY = sum(ydata)/len(ydata)
        #yline = [falseY] * len(self.x)
        #self.plot(yline, c='k', legend='Новый 0')

        vac = np.polyfit(xdata, ydata, deg)
        newy = np.polyval(vac, xdata)
        newy = ["%.2f" % x for x in newy]
        newy = [float(x) for x in newy]

        if r == 0: pass # print(np.roots(vac))
        elif r == 1: self.plot(newy,legend = leg)
        elif r == 2: self.tabletka('Интеграция - Симпсон ' , str(self.Integrator(newy)))

        return vac


    #Четвертое задание

    def Integrator(self,y):
        return integrate.simpson(y)

    #Пятое задание

    def tabletka(self,items,values,M = 0):
        self.Table.append([items,values])

    def printer(self):
        global Counter
        if Counter == 0:
            graph = 'Graph 1  '
            Counter += 1
        else: graph = 'Graph 2  '
        title = "{0:^80} \n".format('Table of ' + graph + '(' + str(self.ax) + ')')
        line = "{0:<28} + {1:<180} + \n".format("-"*28, "-"*180)
        heading = "{0:<28} | {1:<180} |\n".format("Message", "Value(s)")
        Scr = title + line + heading + line
        for x in self.Table:
            fill = "{0:<28} | {1:<180} | \n".format(str(x[0]), str(x[1]))
            Scr += fill + line
        with open('readme.txt', 'a') as f:
            f.write(Scr)
        print(Scr)
        
    #Седьмое задание

    def Council(self,ydata,deg):
        val = self.Fitter(ydata,deg)
        cut = [self.x[0],self.x[len(self.x) - 1]]

        class edge:
            def __iter__(self):
                self.a = cut[0]
                self.b = 0.1
                return self

            def __next__(self):
                self.a += self.b
                self.a = float("%.2f" % self.a)
                x = self.a
                return x

        #трапеции
        Edge = iter(edge())
        S = 0
        while Edge.a < cut[1]:
            S += (np.polyval(val,float(Edge.a)) + np.polyval(val,float(next(Edge))))/2 * Edge.b
        self.tabletka('Трапеции' ,float("%.2f" % S))
        S = 0

        # прямоугольники слева
        Edge = iter(edge())
        while Edge.a < cut[1]:
            S += (np.polyval(val, float(Edge.a))) * Edge.b
            next(Edge)
        self.tabletka('Прямоугольники слева', float("%.2f" % S))
        S = 0

        # Прямоугольники справа
        Edge = iter(edge())
        while Edge.a < cut[1]:
            S += np.polyval(val, float(next(Edge))) * Edge.b
        self.tabletka('Прямоугольники справа', float("%.2f" % S))
        S = 0

        # Параболы
        Edge1 = iter(edge())
        Edge2 = iter(edge())
        next(Edge2)

        def integrand(j,k,l,p):
            return k * j ** 2 + l * j + p

        while Edge1.a < cut[1] and Edge2.a < cut[1]:
            Tem = [float(Edge1.a), float(Edge2.a)]
            next(Edge1)
            Tem.append(float(next(Edge1)))

            coe = self.Fitter(np.polyval(val, Tem), 2, xdata=Tem)
            k = coe[0]
            l = coe[1]
            p = coe[2]

            S += quad(integrand,Tem[0],Tem[2], args=(k,l,p))[0]
        self.tabletka('Параболы', float("%.2f" % S))




#sys.exit()

#Создаю две коорд сетки - на них строится все  остальное

f1 = Figure(ax = ax1,x =days,title = 'graph',ylabel = 'Temperature',xlabel = 'Days')
f2 = Figure(ax = ax2,x = days,title= 'graph',ylabel = 'Pressure',xlabel = 'Days')

#Задание 1 (с этими графиками тоже работают остальные)

f1.plot(y = TempDay,c = 'ro',legend = 'Air Temperature -- day')
f1.plot(y = TempNight,c = 'go',legend = 'Air Temperature -- night')

f2.plot(y = PressDay,c = 'r^',legend= 'Air Pressure -- day')
f2.plot(y = PressNight,c = 'g^',legend = 'Air Pressure -- night')


#Задание 7

f1.Council(TempDay,3)
f2.Council(PressDay,3)

#Задание 3

f1.DoubleSorter(TempDay)
f1.DoubleSorter(TempNight)
f2.DoubleSorter(PressDay)
f2.DoubleSorter(PressNight)

f1.Fitter(TempDay,3,r = 1)
f2.Fitter(PressDay,3,r = 1)

#Задание 2

f1.MedianTheBuilder(TempDay,legend = 'Air Temperature -- day,mean')
f1.MedianTheBuilder(TempNight,legend = 'Air Temperature -- night,mean')

f2.MedianTheBuilder(PressDay,legend = 'Air Pressure -- day,mean')
f2.MedianTheBuilder(PressNight,legend = 'Air Pressure -- night,mean')

#Задание 4

f1.Fitter(TempDay,3,r = 2)
f2.Fitter(PressDay,3,r = 2)

f1.printer()
f2.printer()
mp.show()





